--a_graycounter DEVICE_FAMILY="Cyclone IV E" PVALUE=0 WIDTH=7 clock cnt_en q
--VERSION_BEGIN 16.0 cbx_a_gray2bin 2016:04:27:18:05:34:SJ cbx_a_graycounter 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = reg 10 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to sub_parity2a0} POWER_UP_LEVEL=HIGH;{-to parity1} POWER_UP_LEVEL=LOW";

SUBDESIGN a_graycounter_on6
( 
	clock	:	input;
	cnt_en	:	input;
	q[6..0]	:	output;
) 
VARIABLE 
	counter3a[6..0] : dffeas;
	parity1 : dffeas
		WITH (
			power_up = "low"
		);
	sub_parity2a0 : dffeas
		WITH (
			power_up = "high"
		);
	sub_parity2a1 : dffeas;
	cntr_cout[6..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter3a[].clk = clock;
	counter3a[].d = ( (counter3a[6].q $ cntr_cout[5..5]), (counter3a[5].q $ (counter3a[4].q & cntr_cout[4..4])), (counter3a[4].q $ (counter3a[3].q & cntr_cout[3..3])), (counter3a[3].q $ (counter3a[2].q & cntr_cout[2..2])), (counter3a[2].q $ (counter3a[1].q & cntr_cout[1..1])), (counter3a[1].q $ (counter3a[0].q & cntr_cout[0..0])), ((cnt_en & (counter3a[0].q $ (! parity_cout))) # ((! cnt_en) & counter3a[0].q)));
	counter3a[].sclr = sclr;
	parity1.clk = clock;
	parity1.d = ((cnt_en & (sub_parity2a[0..0].q $ sub_parity2a[1..1].q)) # ((! cnt_en) & parity1.q));
	parity1.sclr = sclr;
	sub_parity2a[1..0].clk = ( clock, clock);
	sub_parity2a[1..0].d = ( ((cnt_en & ((counter3a[4..4].q $ counter3a[5..5].q) $ counter3a[6..6].q)) # ((! cnt_en) & sub_parity2a[1].q)), ((cnt_en & (((counter3a[0..0].q $ counter3a[1..1].q) $ counter3a[2..2].q) $ counter3a[3..3].q)) # ((! cnt_en) & sub_parity2a[0].q)));
	sub_parity2a[1..0].sclr = ( sclr, sclr);
	cntr_cout[] = ( B"0", (cntr_cout[4..4] & (! counter3a[4].q)), (cntr_cout[3..3] & (! counter3a[3].q)), (cntr_cout[2..2] & (! counter3a[2].q)), (cntr_cout[1..1] & (! counter3a[1].q)), (cntr_cout[0..0] & (! counter3a[0].q)), (cnt_en & parity_cout));
	parity_cout = ((parity1.q $ (! updown)) & cnt_en);
	q[] = counter3a[].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
